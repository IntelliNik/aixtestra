/*
 * Client API
 * API called by backend
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.aixtra.couchcode.client.challenge.api;

import com.aixtra.couchcode.client.challenge.model.EvaluationScore;
import com.aixtra.couchcode.client.oauth.BearerStore;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import static io.micronaut.http.HttpHeaders.AUTHORIZATION;

@Generated(value = "org.openapitools.codegen.languages.JavaMicronautClientCodegen", date = "2022-10-22T18:01:35.219427+02:00[Europe/Berlin]")
@Client("${backend.baseUrl}")
public abstract class EvaluationApi {
    private static final Logger LOGGER = LoggerFactory.getLogger(EvaluationApi.class);
    private final BearerStore store;

    EvaluationApi(BearerStore store) {
        this.store = store;
    }

    public Mono<EvaluationScore> evaluate(String taskId, byte[] solution) {
        String currentBearer = store.currentBearerAsAuth();
        LOGGER.info("Evaluating Solution {} for taskId {} with Token: {}...", solution, taskId, currentBearer.substring(7, 15));
        return Mono.defer(() -> evaluate(currentBearer, taskId, solution));
    }

    /**
     * Evaluate a given Product based on a generated catalog to the actual Product
     *
     * @param taskId   the task/catalog id to compare the given Product to (required)
     * @param solution the Product (required)
     * @return EvaluationScore
     */
    @Post(uri = "/api/evaluate/{taskId}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    abstract Mono<EvaluationScore> evaluate(
            @Header(AUTHORIZATION) String authorization,
            @PathVariable(name = "taskId") @NotNull String taskId,
            @Body @NotNull @Valid byte[] solution
    );

}

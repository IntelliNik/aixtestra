/*
 * Client API
 * API called by backend
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.aixtra.couchcode.client.challenge.api;

import com.aixtra.couchcode.client.oauth.BearerStore;
import io.micronaut.http.annotation.Header;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.client.annotation.Client;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;

import static io.micronaut.http.HttpHeaders.AUTHORIZATION;

@Generated(value = "org.openapitools.codegen.languages.JavaMicronautClientCodegen", date = "2022-10-22T18:01:35.219427+02:00[Europe/Berlin]")
@Client("${backend.baseUrl}")
public abstract class RatingApi {
    private static final Logger LOGGER = LoggerFactory.getLogger(RatingApi.class);
    private final BearerStore store;

    RatingApi(BearerStore store) {
        this.store = store;
    }

    public Mono<Void> register() {
        String currentBearer = store.currentBearerAsAuth();
        LOGGER.info("Registering for next challenge with Token: {}...", currentBearer.substring(0, 6));
        return Mono.defer(()->register(currentBearer));
    }

    /**
     * Register for the next rating run, in order to compete with the other teams. A rating run is scheduled at every hour sharp. After a rating runs finished, a team has to re-register for the next rating run. A re-registration for the same rating-run will result in a Bad-Request Exception
     */
    @Post(uri = "/api/rating/register")
    abstract Mono<Void> register(@Header(AUTHORIZATION) String authorization);

}

/*
 * Client API
 * API called by backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.aixtra.couchcode.client.challenge.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TaskWithSolution
 */
@JsonPropertyOrder({
  TaskWithSolution.JSON_PROPERTY_ID,
  TaskWithSolution.JSON_PROPERTY_TASK,
  TaskWithSolution.JSON_PROPERTY_SOLUTION
})
@JsonTypeName("TaskWithSolution")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-10-22T18:01:35.219427+02:00[Europe/Berlin]")
@Introspected
public class TaskWithSolution {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_TASK = "task";
    private String task;

    public static final String JSON_PROPERTY_SOLUTION = "solution";
    private Solution solution;

    public TaskWithSolution(String id, String task, Solution solution) {
        this.id = id;
        this.task = task;
        this.solution = solution;
    }

    public TaskWithSolution id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     * @return id
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public TaskWithSolution task(String task) {
        this.task = task;
        return this;
    }

    /**
     * Get task
     * @return task
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TASK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTask() {
        return task;
    }

    @JsonProperty(JSON_PROPERTY_TASK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTask(String task) {
        this.task = task;
    }

    public TaskWithSolution solution(Solution solution) {
        this.solution = solution;
        return this;
    }

    /**
     * Get solution
     * @return solution
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_SOLUTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Solution getSolution() {
        return solution;
    }

    @JsonProperty(JSON_PROPERTY_SOLUTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSolution(Solution solution) {
        this.solution = solution;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskWithSolution taskWithSolution = (TaskWithSolution) o;
        return Objects.equals(this.id, taskWithSolution.id) &&
            Objects.equals(this.task, taskWithSolution.task) &&
            Objects.equals(this.solution, taskWithSolution.solution);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, task, solution);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TaskWithSolution {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    task: ").append(toIndentedString(task)).append("\n");
        sb.append("    solution: ").append(toIndentedString(solution)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
